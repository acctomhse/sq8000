#ifndef __SOCLE_UART_REGS_H_INCLUDED
#define __SOCLE_UART_REGS_H_INCLUDED

/*
 *  Registers for UART
 *  */
#define SOCLE_UART_RBR 0x0000 /* receiver FIFO output */
#define SOCLE_UART_THR 0x0000 /* transmit FIFO input */
#define SOCLE_UART_IER 0x0004 /* enable/mask interrupts generated by the UART */
#define SOCLE_UART_IIR 0x0008 /* get interrupt information */
#define SOCLE_UART_FCR 0x0008 /* control FIFO options */
#define SOCLE_UART_LCR 0x000C /* line control register */
#define SOCLE_UART_MCR 0x0010 /* modem control register */
#define SOCLE_UART_LSR 0x0014 /* line status information */
#define SOCLE_UART_MSR 0x0018 /* modem status */
#define SOCLE_UART_IRDACR 0x001C /* IrDA SIR control register */
#define SOCLE_UART_DLL 0x0000 /* the LSB of the divisor latch */
#define SOCLE_UART_DLH 0x0004 /* the MSB of the divisor latch */
#define SOCLE_UART_CTRL 0x0020
#define SOCLE_UART_FIFO_SIZE 16

/*
 *  SOCLE_UART_IER
 *  */
/* Modem status interrupt */
#define SOCLE_UART_IE_MS_DIS 0x0	/* disabled */
#define SOCLE_UART_IE_MS_EN (0x1 << 3) /* enabled */

/* Receiver line status interrupt */
#define SOCLE_UART_IE_LS_DIS 0x0	/* disabled */
#define SOCLE_UART_IE_LS_EN (0x1 << 2) /* enabled */

/* Transmitter holding register empty interrupt */
#define SOCLE_UART_IE_TBE_DIS 0x0	/* disabled */
#define SOCLE_UART_IE_TBE_EN (0x1 << 1) /* enabled */

/* Received data available interrupt */
#define SOCLE_UART_IE_RBR_DIS 0x0	/* disabled */
#define SOCLE_UART_IE_RBR_EN 0x1	/* enabled */

/*
 *  SOCLE_UART_IIR
 *  */
#define SOCLE_UART_IIR_PEND_INT 0x1 /* indicate that an interrupt is pending */
#define SOCLE_UART_IIR_LS_INT (0x3 << 1) /* receiver line status interrupt */
#define SOCLE_UART_IIR_RBR_INT (0x2 << 1) /* receive data available interrupt*/
#define SOCLE_UART_IIR_TO_INT (0x6 << 1)	/* timeout indication interrupt*/
#define SOCLE_UART_IIR_TBE_INT (0x1 << 1) /* transmitter holding register empty interrupt*/
#define SOCLE_UART_IIR_MS_INT 0x0	/* modem status interrupt */

/*
 *  SOCLE_UART_FCR
 *  */
/* Define the receiver FIFO interrupt trigger level */
#define SOCLE_UART_FCR_THRESH_1 0x0	/* 1 byte */
#define SOCLE_UART_FCR_THRESH_4 (0x1 << 6) /* 4 bytes */
#define SOCLE_UART_FCR_THRESH_8 (0x2 << 6) /* 8 bytes */
#define SOCLE_UART_FCR_THRESH_14 (0x3 <<6) /* 14 bytes */

/* Writing a '1' to bit 2 clears the transmitter FIFO
 * and resets its logic*/
#define SOCLE_UART_FCR_TX_NCLR 0x0 /* not clear */
#define SOCLE_UART_FCR_TX_CLR (0x1 << 2) /* clear */

/* Writing a '1' to bit 1 clears the receiver FIFO
 * and resets its logic */
#define SOCLE_UART_FCR_RX_NCLR 0x0 /* not clear */
#define SOCLE_UART_FCR_RX_CLR (0x1 << 1) /* clear */

/* Enable FIFOs in NS 16550D */
#define SOCLE_UART_FCR_FIFO_DIS 0x0 /* disable */
#define SOCLE_UART_FCR_FIFO_EN 0x1 /* enable */

/*
 *  SOCLE_UART_LCR
 *  */
/* Divisor Latch Access bit */
#define SOCLE_UART_LCR_DIV_LATCH_DIS 0x0 /* the normal registers are accessed */
#define SOCLE_UART_LCR_DIV_LATCH_EN (0x1 << 7) /* the divisor latches can be accessed */

/* Break Control bit */
#define SOCLE_UART_LCR_BRK_DIS 0x0 /* break is disabled */
#define SOCLE_UART_LCR_BRK_EN (0x1 << 6) /* the serial out is forced into logic '0' (break state) */

/* Sticky Parity bit */
#define SOCLE_UART_LCR_STICK_DIS 0x0 /* stick parity disabled */
#define SOCLE_UART_LCR_STICK_EN (0x1 << 5) /* if bit 3 and 4 are logic '1', the parity bit is transmitted
					  * and checked as logic '0'
					  * if bit 3 is 1'1' and bit 4 is '0' then the parity bit is transmitted
					  * and checked as '1'*/
/* Even parity select */
#define SOCLE_UART_LCR_PARITY_ODD 0x0	/* odd number of '1' is transmitted and check in each word (data and parity combined
				 * in other words, if the data has an even number of '1' in it, then the parity bit is '1'*/
#define SOCLE_UART_LCR_PARITY_EVEN (0x1 << 4)	/* even number of '1' is transmitted in each word */

/* Parity Enable */
#define SOCLE_UART_LCR_PARITY_DIS 0x0 /* no parity */
#define SOCLE_UART_LCR_PARITY_EN (0x1 << 3) /* parity bit is generated on each outgoing charater and
					   * is checked on each incoming one*/

/* Specify the number of generated stop bits */
#define SOCLE_UART_LCR_STOP_1 0x0	/* 1 stop bit */
#define SOCLE_UART_LCR_STOP_15 (0x1 << 2) /* 1.5 stop bits when 5-bit character length selected and
				     * 2 bits otherwise*/

/* Select number of bits in each character */
#define SOCLE_UART_LCR_NBITS_5 0x0	/* 5 bits */
#define SOCLE_UART_LCR_NBITS_6 0x1	/* 6 bits */
#define SOCLE_UART_LCR_NBITS_7 0x2	/* 7 bits */
#define SOCLE_UART_LCR_NBITS_8 0x3	/* 8 bits */

/*
 *  SOCLE_UART_MCR
 *  */
/* Loopback mode */
#define SOCLE_UART_MCR_NORMAL 0x0	/* normal operation */
#define SOCLE_UART_MCR_LOOPBACK (0x1 << 4) /* loopback mode */

/* Out2. In loopback mode, connected to Data Carrier Detect (nDCD) input */
#define SOCLE_UART_MCR_OUT2 (0x1 << 3)

/* Out1. In loopback mode, connected Ring Indicator (nRI) signal input */
#define SOCLE_UART_MCR_OUT1 (0x1 << 2)

/* Request To Send (nRTS) signal control */
#define SOCLE_UART_MCR_RTS (0x1 << 1)

/* Data Terminal Ready (nDTR) signal control */
#define SOCLE_UART_MCR_DTR 0x1

/*
 *  SOCLE_UART_LSR
 *  */
/* At least one parity error, framing error or break indications have been received and
 * are inside the FIFO
 * The bit is cleared upon reading from the register*/
#define SOCLE_UART_LSR_ERR (0x1 << 7)

/* Transmitter Empty indicator */
#define SOCLE_UART_LSR_TEMT (0x1 << 6)

/* Transmit FIFO is empty */
#define SOCLE_UART_LSR_THRE (0x1 << 5)

/* Break Interrupt (BI) indicator */
#define SOCLE_UART_LSR_BI (0x1 << 4)

/* Framming Error (FE) indicator */
#define SOCLE_UART_LSR_FE (0x1 << 3)

/* Parity Error (PE) indicator */
#define SOCLE_UART_LSR_PE (0x1 << 2)

/* Overrun Error (OE) indicator */
#define SOCLE_UART_LSR_OE (0x1 << 1)

/* Data Ready (DR) indicator */
#define SOCLE_UART_LSR_DR 0x1

/*
 *  SOCLE_UART_MSR
 *  */
/* Complement of the nDCD input or equals to Out2 (MCR[3]) in loopback mode */
#define SOCLE_UART_MSR_NDCD (0x1 << 7)

/* Complement of the nRI input or equals to Out1 (MCR[2]) in loopback mode */
#define SOCLE_UART_MSR_NRI (0x1 << 6)

/* Complement of the nDSR input or equals to nDTR (MCR[0] in loopback mode */
#define SOCLE_UART_MSR_NDSR (0x1 << 5)

/* Complement of the nCTS input or equals to nRTS (MCR[1]) in loopback mode */
#define SOCLE_UART_MSR_NCTS (0x1 << 4)

/* Delta Data Carrier Detect (DDCD) indicator */
#define SOCLE_UART_MSR_DDCD (0x1 << 3)

/* Trailing Edge of Ring Indicator (TERI) detector. The nRI line has changed its state from low to high state */
#define SOCLE_UART_MSR_TERI (0x1 << 2)

/* Delta Data Set Ready (DDSR) indicator */
#define SOCLE_UART_MSR_DDSR (0x1 << 1)

/* Delta Clear To Send (DCTS) indicator */
#define SOCLE_UART_MSR_DCTS 0x1
 
#endif
