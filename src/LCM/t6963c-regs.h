#ifndef __T6963C_REG_H
#define __T6963C_REG_H

#define T6963C_REVERSE

#define COLUMN		22
#define TXT_LINE		8
#define GRA_LINE	64

#define TXT_HOME_ADDR		0x0000
#define GRA_HOME_ADDR		0x0c00

#define OFFSET_REG_DATA	0x0003
#define LINE_SCAN			0x0
#define CG_RAM_ADDR(code)	((OFFSET_REG_DATA << 11) | ((code) << 3) | LINE_SCAN)

// Command
#define CMD_SET_CUR_PTR				0x21
#define CMD_SET_OFF_REG				0x22
#define CMD_SET_ADR_PTR				0x24

#define CMD_SET_TXT_HOM_ADR			0x40
#define CMD_SET_TXT_ARE				0x41
#define CMD_SET_GRA_HOM_ADR			0x42
#define CMD_SET_GRA_ARE				0x43

#define CMD_SET_OR_MODE				0x80
#define CMD_SET_XOR_MODE				0x81
#define CMD_SET_AND_MODE				0x83
#define CMD_SET_TXT_ATT_MODE			0x84
#define CMD_SET_INT_CCM_MODE			0x80
#define CMD_SET_EXT_CCM_MODE			0x88

//attribute
#define NORMAL_DISP						0x0
#define REVERSE_DISP					0x5
#define INHIBIT_DISP						0x3
#define BLINK_NORMAL_DISP				0x8
#define BLINK_REVERSE_DISP				0xd
#define BLINK_INHIBIT_DISP				0xb

// display mode
#define CMD_SET_DIS_OFF				0x90
#define CMD_SET_CUR_ON_BLK_OFF		0x92
#define CMD_SET_CUR_ON_BLK_ON			0x93
#define CMD_SET_TXT_ON_GRA_OFF		0x94
#define CMD_SET_TXT_OFF_GRA_ON		0x98
#define CMD_SET_TXT_ON_GRA_ON		0x9C

#define CMD_SET_1_LINE_CUR			0xA0
#define CMD_SET_2_LINE_CUR			0xA1
#define CMD_SET_3_LINE_CUR			0xA2
#define CMD_SET_4_LINE_CUR			0xA3
#define CMD_SET_5_LINE_CUR			0xA4
#define CMD_SET_6_LINE_CUR			0xA5
#define CMD_SET_7_LINE_CUR			0xA6
#define CMD_SET_8_LINE_CUR			0xA7

#define CMD_SET_DATA_AUTO_W			0xB0
#define CMD_SET_DATA_AUTO_R			0xB1
#define CMD_SET_AUTO_RESET			0xB2

#define CMD_SET_DATA_W_INC_ADP		0xC0
#define CMD_SET_DATA_R_INC_ADP		0xC1
#define CMD_SET_DATA_W_DEC_ADP		0xC2
#define CMD_SET_DATA_R_DEC_ADP		0xC3
#define CMD_SET_DATA_W_NON_ADP		0xC4
#define CMD_SET_DATA_R_NON_ADP		0xC5

#define CMD_SET_SCREEN_PEEK			0xE0

#define CMD_SET_SCREEN_COPY			0xE8

#define CMD_SET_BIT_RESET			0xF0
#define CMD_SET_BIT_0				0xF8
#define CMD_SET_BIT_1				0xF9
#define CMD_SET_BIT_2				0xFA
#define CMD_SET_BIT_3				0xFB
#define CMD_SET_BIT_4				0xFC
#define CMD_SET_BIT_5				0xFD
#define CMD_SET_BIT_6				0xFE
#define CMD_SET_BIT_7				0xFF


// Status
#define STATUS_EXEC_CAP				0x01
#define STATUS_DATA_RW_CAP			0x02
#define STATUS_AUTO_DATA_R_CAP		0x04
#define STATUS_AUTO_DATA_W_CAP		0x08
#define STATUS_CTRL_OPE_CAP			0x20
#define STATUS_ERR_FLAG				0x40
#define STATUS_BLINK_COND				0x80


#define DATA_NUM(x)		(sizeof(x) / sizeof(x[0]))

#define CHAR_SPACE					0x20


#if 0
static u8 extcg[] = {	// "­i´¹"
		0x04, 0x04, 0x04, 0x1f, 0x15, 0x15, 0x15, 0x15,	// upper/left
		0x00, 0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, // upper/ritht
		0x15, 0x1f, 0x04, 0x04, 0x05, 0x1f, 0x30, 0x00, // lower/left
		0x04, 0x04, 0x04, 0x04, 0x04, 0x24, 0x3f, 0x00, // lower/ritht
		0x07, 0x04, 0x04, 0x07, 0x04, 0x04, 0x07, 0x00, // upper/left
		0x30, 0x10, 0x10, 0x30, 0x10, 0x10, 0x30, 0x00, // upper/ritht
		0x3e, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x3e, 0x00, // lower/left
		0x3e, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x3e, 0x00, // lower/ritht
	}, intcg1[] = {	// "Diagnostic  Program"
		0x24, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x00, 0x00,
		0x30, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d,
#if 0
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#endif
	}, intcg2[] = {	// "Socle Tech. Corp."
		0x33, 0x4f, 0x43, 0x4c, 0x45, 0x00,
		0x34, 0x45, 0x43, 0x48, 0x0e, 0x00,
		0x23, 0x4f, 0x52, 0x50, 0x0e,
	}, expart1[] = {
		0x80, 0x81, 0x00, 0x00, 0x84, 0x85,
	}, expart2[] = {
		0x82, 0x83, 0x00, 0x00, 0x86, 0x87,
	};
#endif

#ifdef T6963C_REVERSE
static u8 ascii_table [] = {
	// 0x80 ~ 0x8f
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// space
		0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08,	// !
		0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x14,	// "
		0x00, 0x14, 0x14, 0x3e, 0x14, 0x3e, 0x14, 0x14,	// #
		0x00, 0x04, 0x1e, 0x28, 0x1c, 0x0a, 0x3c, 0x08,	// $
		0x00, 0x30, 0x32, 0x04, 0x08, 0x10, 0x26, 0x06,	// %
		0x00, 0x2c, 0x12, 0x2a, 0x24, 0x0a, 0x0a, 0x04,	// &
		0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x08, 0x0c,	// '
		0x00, 0x10, 0x08, 0x04, 0x04, 0x04, 0x08, 0x10,	// (
		0x00, 0x04, 0x08, 0x10, 0x10, 0x10, 0x08, 0x04,	// )
		0x00, 0x08, 0x2a, 0x1c, 0x08, 0x1c, 0x2a, 0x08,	// *
		0x00, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00,	// +
		0x00, 0x04, 0x08, 0x0c, 0x00, 0x00, 0x00, 0x00,	// ,
		0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00,	// -
		0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,	// .
		0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00,	// /
	// 0x90 ~ 0x9f
		0x00, 0x1c, 0x22, 0x26, 0x2a, 0x32, 0x22, 0x1c,	// 0
		0x00, 0x1c, 0x08, 0x08, 0x08, 0x08, 0x0c, 0x08,	// 1
		0x00, 0x3e, 0x04, 0x08, 0x10, 0x20, 0x22, 0x1c,	// 2
		0x00, 0x1c, 0x22, 0x20, 0x10, 0x08, 0x10, 0x3e,	// 3
		0x00, 0x10, 0x10, 0x3e, 0x12, 0x14, 0x18, 0x10,	// 4
		0x00, 0x1c, 0x22, 0x20, 0x20, 0x1e, 0x02, 0x3e,	// 5
		0x00, 0x1c, 0x22, 0x22, 0x1e, 0x02, 0x04, 0x18,	// 6
		0x00, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x3e,	// 7
		0x00, 0x1c, 0x22, 0x22, 0x1c, 0x22, 0x22, 0x1c,	// 8
		0x00, 0x0c, 0x10, 0x20, 0x3c, 0x22, 0x22, 0x1c,	// 9
		0x00, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00,	// :
		0x00, 0x04, 0x08, 0x0c, 0x00, 0x0c, 0x0c, 0x00,	// ;
		0x00, 0x10, 0x08, 0x04, 0x02, 0x04, 0x08, 0x10,	// <
		0x00, 0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00,	// =
		0x00, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04,	// >
		0x00, 0x08, 0x00, 0x08, 0x10, 0x20, 0x22, 0x1c,	// ?
	// 0xa0 ~ 0xaf
		0x00, 0x1c, 0x02, 0x3a, 0x2a, 0x3a, 0x22, 0x1c,	// @
		0x00, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x14, 0x08,	// A
		0x00, 0x1e, 0x22, 0x22, 0x1e, 0x22, 0x22, 0x1e,	// B
		0x00, 0x1c, 0x22, 0x02, 0x02, 0x02, 0x22, 0x1c,	// C
		0x00, 0x0e, 0x12, 0x22, 0x22, 0x22, 0x12, 0x0e,	// D
		0x00, 0x3e, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e,	// E
		0x00, 0x02, 0x02, 0x02, 0x1e, 0x02, 0x02, 0x3e,	// F
		0x00, 0x3c, 0x22, 0x22, 0x3a, 0x02, 0x22, 0x1c,	// G
		0x00, 0x22, 0x22, 0x22, 0x3e, 0x22, 0x22, 0x22,	// H
		0x00, 0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1c,	// I
		0x00, 0x0c, 0x12, 0x10, 0x10, 0x10, 0x10, 0x38,	// J
		0x00, 0x22, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x22,	// K
		0x00, 0x3e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,	// L
		0x00, 0x22, 0x22, 0x22, 0x2a, 0x2a, 0x36, 0x22,	// M
		0x00, 0x22, 0x22, 0x32, 0x2a, 0x26, 0x22, 0x22,	// N
		0x00, 0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1c,	// O
	// 0xb0 ~ 0xbf
		0x00, 0x02, 0x02, 0x02, 0x1e, 0x22, 0x22, 0x1e,	// P
		0x00, 0x2c, 0x12, 0x2a, 0x22, 0x22, 0x22, 0x1c,	// Q
		0x00, 0x22, 0x12, 0x0a, 0x1e, 0x22, 0x22, 0x1e,	// R
		0x00, 0x1c, 0x22, 0x20, 0x1c, 0x02, 0x22, 0x1c,	// S
		0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3e,	// T
		0x00, 0x1c, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,	// U
		0x00, 0x08, 0x14, 0x22, 0x22, 0x22, 0x22, 0x22,	// V
		0x00, 0x14, 0x2a, 0x2a, 0x2a, 0x22, 0x22, 0x22,	// W
		0x00, 0x22, 0x22, 0x14, 0x08, 0x14, 0x22, 0x22,	// X
		0x00, 0x08, 0x08, 0x08, 0x08, 0x14, 0x22, 0x22,	// Y
		0x00, 0x3e, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3e,	// Z
		0x00, 0x1c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1c,	// [
		0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00,	// "\"
		0x00, 0x1c, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1c,	// ]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x14, 0x08,	// ^
		0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// _
	// 0xc0 ~ 0xcf
		0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x08, 0x18,	// `
		0x00, 0x3c, 0x22, 0x3c, 0x20, 0x1c, 0x00, 0x00,	// a
		0x00, 0x1e, 0x22, 0x22, 0x22, 0x1e, 0x02, 0x02,	// b
		0x00, 0x3c, 0x02, 0x02, 0x02, 0x3c, 0x00, 0x00,	// c
		0x00, 0x3c, 0x22, 0x22, 0x22, 0x3c, 0x20, 0x20,	// d
		0x00, 0x1c, 0x02, 0x3e, 0x22, 0x1c, 0x00, 0x00,	// e
		0x00, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x08, 0x30,	// f
		0x00, 0x1c, 0x20, 0x3c, 0x22, 0x3c, 0x00, 0x00,	// g
		0x00, 0x22, 0x22, 0x22, 0x26, 0x1a, 0x02, 0x02,	// h
		0x00, 0x1c, 0x08, 0x08, 0x08, 0x0c, 0x00, 0x08,	// i
		0x00, 0x0c, 0x12, 0x10, 0x10, 0x18, 0x00, 0x10,	// j
		0x00, 0x12, 0x0a, 0x06, 0x0a, 0x12, 0x02, 0x02,	// k
		0x00, 0x1c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0c,	// l
		0x00, 0x2a, 0x2a, 0x2a, 0x2a, 0x16, 0x00, 0x00,	// m
		0x00, 0x22, 0x22, 0x22, 0x26, 0x1a, 0x00, 0x00,	// n
		0x00, 0x1c, 0x22, 0x22, 0x22, 0x1c, 0x00, 0x00,	// o
	// 0xd0 ~ 0xdf
		0x00, 0x02, 0x02, 0x1e, 0x22, 0x1e, 0x00, 0x00,	// p
		0x00, 0x20, 0x20, 0x3c, 0x22, 0x3c, 0x00, 0x00,	// q
		0x00, 0x04, 0x04, 0x04, 0x0c, 0x34, 0x00, 0x00,	// r
		0x00, 0x1e, 0x20, 0x1c, 0x02, 0x1c, 0x00, 0x00,	// s
		0x00, 0x30, 0x08, 0x08, 0x08, 0x3e, 0x08, 0x08,	// t
		0x00, 0x2c, 0x32, 0x22, 0x22, 0x22, 0x00, 0x00,	// u
		0x00, 0x08, 0x14, 0x22, 0x22, 0x22, 0x00, 0x00,	// v
		0x00, 0x14, 0x2a, 0x2a, 0x22, 0x22, 0x00, 0x00,	// w
		0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00, 0x00,	// x
		0x00, 0x1c, 0x20, 0x3c, 0x22, 0x22, 0x00, 0x00,	// y
		0x00, 0x3e, 0x04, 0x08, 0x10, 0x3e, 0x00, 0x00,	// z
		0x00, 0x30, 0x08, 0x08, 0x04, 0x08, 0x08, 0x30,	// {
		0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,	// |
		0x00, 0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06,	// }
		0x00, 0x00, 0x00, 0x10, 0x2a, 0x04, 0x00, 0x00,	// ~
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// 

	// 0xe0 ~ 0xef
		0x08, 0x08, 0x08, 0x08, 0x38, 0x00, 0x00, 0x00,	// |-
		0x08, 0x08, 0x08, 0x08, 0x0f, 0x00, 0x00, 0x00,	// -|
		0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x08, 0x08,	// |_
		0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0x08, 0x08,	// _|
		0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,	// -
		0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,	// |

	};
#endif

#define CONV_CODE(x)		((x) - 0x80 + CHAR_SPACE)

#define RECTANGLE_U_L			CONV_CODE(0xe0)
#define RECTANGLE_U_R			CONV_CODE(0xe1)
#define RECTANGLE_L_L			CONV_CODE(0xe2)
#define RECTANGLE_L_R			CONV_CODE(0xe3)
#define RECTANGLE_H				CONV_CODE(0xe4)
#define RECTANGLE_V				CONV_CODE(0xe5)

#endif	//__T6963C_REG_H

